#!/bin/bash
# -x to print commands
# script/server: Launch the application and any extra required processes
#                locally.
# Set up the VARIABLES
cd "$WORKING_DIR"
source script/bootstrap
#[ -z "$ID" ] && export ID=001
#[ -z "$SLEEP" ] && export SLEEP=5
#[ -z "$WORKING_DIR" ] && export WORKING_DIR=$(pwd)
#[ -z "$EUREKA_ZONES" ] && export EUREKA_ZONES='a b c d'
#[ -z "$EUREKA_HOSTNAMES" ] && export EUREKA_HOSTNAMES='10-10-0-2.zone-a.eureka.local 10-10-0-3.zone-b.eureka.local 10-10-0-4.zone-c.eureka.local 10-10-0-5.zone-c.eureka.local'
#[ -z "$SUBNET" ] && export SUBNET='10.10.0.0/29'
echo "********* Start a Dnsmasq Container running on the HostZ machine"
eval $(docker-machine env HostZ)

docker ps -a | grep "dnsmasq" >/dev/null
if [ $? -ne 0 ] ; then
	echo "********* Cloning github dnsmasq config"
	cd ".." && \
	git clone https://github.com/danigiri/docker-dnsmasq.git >/dev/null 2>/dev/null

	echo "********* Building container: dnsmasq-eureka"
	cd "$DNSMASQ_DIR" && \
	docker build -t danigiri/docker-dnsmasq . >/dev/null
	cd "$WORKING_DIR"/dnsmasq && \
	docker build -t dnsmasq-eureka . >/dev/null
	docker run -d --name 'dnsmasq' -p 53:53 -p 53:53/udp --cap-add=NET_BIND_SERVICE --cap-add=NET_ADMIN --cap-add=NET_RAW \
	dnsmasq-eureka /etc/dnsmasq.conf -i eth0 -i eth1 -8 -
else
	echo "Dnsmasq not created because already exists :)"
	docker start "dnsmasq" >/dev/null 2>/dev/null
fi


	
#any_network_=$(echo "$EUREKA_ZONES" | awk '{print $1}')
#h_=1
#for i in $EUREKA_ZONES; do
#	hostname_=$(echo "$EUREKA_HOSTNAMES"|awk '{print $'$h_'}')
#	eval $(docker-machine env "eureka${ID}$i") && \
#	docker run -d -h "$hostname_" --name "$hostname_" --dns=$(docker-machine ip "service$ID") --net="eureka$ID" -p "808$h_":8080 docker-eureka
#	let "h_++"
#done
